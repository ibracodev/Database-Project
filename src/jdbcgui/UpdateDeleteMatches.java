/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ibrahim
 */
public class UpdateDeleteMatches extends javax.swing.JFrame {

    /**
     * Creates new form UpdateDeleteMatches
     */
    myDBCon dbCon;
    ResultSet rs;

    
    
    public UpdateDeleteMatches() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        lblErrorVisitor.setVisible(false);
        lblErrorHome.setVisible(false);
        
        dbCon = new myDBCon();
        getNewData();
    }
    
    private void getNewData() {

        try {
            
            rs = dbCon.executeStatement("SELECT team_id from teams ORDER BY team_id ASC");
             
            cmbHome.removeAllItems();          
            while (rs.next()) {
                cmbHome.addItem(rs.getString("team_id"));
            }
            
            rs = dbCon.executeStatement("SELECT team_id from teams ORDER BY team_id ASC");
             
            cmbVisitor.removeAllItems();          
            while (rs.next()) {
                cmbVisitor.addItem(rs.getString("team_id"));
            }
            
            rs = dbCon.executeStatement("SELECT DISTINCT result from Match ORDER BY result ASC");
             
            cmbResult.removeAllItems();          
            while (rs.next()) {
                cmbResult.addItem(rs.getString("result"));
            }  
            
            rs = dbCon.executeStatement("SELECT Match_Number from Match ORDER BY Match_Number ASC");
             
            cmbMatchNo.removeAllItems();          
            while (rs.next()) {
                cmbMatchNo.addItem(rs.getString("Match_Number"));
            }
            
             rs = dbCon.executeStatement("SELECT match_number, home, home_goals, visitor, visitor_goals, result from Match ORDER BY Match_Number ASC");
            
                rs.beforeFirst();
                rs.first();
                populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
   
    private void populateFields() {
        try {
            cmbHome.setSelectedItem(rs.getString("home"));
            txtHomeGoals.setText(rs.getString("home_goals"));
            cmbVisitor.setSelectedItem(rs.getString("visitor"));
            txtVisitGoals.setText(rs.getString("visitor_goals"));
            cmbResult.setSelectedItem(rs.getString("result"));
            cmbMatchNo.setSelectedItem(rs.getString("match_number"));
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

        private void MoveNext() {
        try {
            // TODO add your handling code here:

            if (!rs.isLast()) {

                rs.next();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void MovePrevious() {
        try {
            // TODO add your handling code here:

            if (!rs.isFirst()) {
                rs.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                Prev.setEnabled(false);
            } else {
                Prev.setEnabled(true);
            }
            if (rs.isLast()) {
                Next.setEnabled(false);
            } else {
                Next.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbHome = new javax.swing.JComboBox<>();
        lblHome = new javax.swing.JLabel();
        lblAway = new javax.swing.JLabel();
        cmbVisitor = new javax.swing.JComboBox<>();
        cmbResult = new javax.swing.JComboBox<>();
        lblResult = new javax.swing.JLabel();
        cmbMatchNo = new javax.swing.JComboBox<>();
        lblMatchNumber = new javax.swing.JLabel();
        Next = new javax.swing.JButton();
        Prev = new javax.swing.JButton();
        UpdateMatch = new javax.swing.JButton();
        DeleteMatch = new javax.swing.JButton();
        txtVisitGoals = new javax.swing.JTextField();
        txtHomeGoals = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblErrorHome = new javax.swing.JLabel();
        lblErrorVisitor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Matches");

        lblHome.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblHome.setText("Home:");

        lblAway.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblAway.setText("Away:");

        cmbVisitor.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        cmbResult.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        lblResult.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblResult.setText("Result:");

        lblMatchNumber.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMatchNumber.setText("Match Number:");

        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Prev.setText("Previous");
        Prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevActionPerformed(evt);
            }
        });

        UpdateMatch.setText("Update");
        UpdateMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateMatchActionPerformed(evt);
            }
        });

        DeleteMatch.setText("Delete");
        DeleteMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMatchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Home Goals:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Visitor Goals:");

        lblErrorHome.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorHome.setText("Error");

        lblErrorVisitor.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorVisitor.setText("Error");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblResult)
                                    .addComponent(lblMatchNumber)
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Prev, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(UpdateMatch)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbMatchNo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbResult, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtVisitGoals)
                                    .addComponent(txtHomeGoals)
                                    .addComponent(cmbVisitor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbHome, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblErrorHome)
                                    .addComponent(lblErrorVisitor))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(DeleteMatch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(Next))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHome)
                            .addComponent(lblAway)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1)))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHome))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbVisitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAway))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtHomeGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorHome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblResult))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbMatchNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMatchNumber))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Next)
                            .addComponent(Prev)
                            .addComponent(UpdateMatch)
                            .addComponent(DeleteMatch)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtVisitGoals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblErrorVisitor)))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        MoveNext();
    }//GEN-LAST:event_NextActionPerformed

    private void PrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_PrevActionPerformed

    private void DeleteMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMatchActionPerformed
        // TODO add your handling code here:
         try {
         
              
            String strSQL;
              
            int result = JOptionPane.showConfirmDialog(this," Do you want to continue action?","Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {

                        strSQL = "DELETE FROM match WHERE match_number = " +cmbMatchNo.getSelectedItem().toString();
                        result= dbCon.executePrepared(strSQL);
                 
                        if (result >0){
                                 javax.swing.JLabel label = new javax.swing.JLabel("Match of Match NUMBER " + cmbMatchNo.getSelectedItem().toString() + " deleted successfully.");
                                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                getNewData();
                               }  
                            else {   
                        }
                    
               
            } else {
                 javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting match." + e.getMessage());
        }
    }//GEN-LAST:event_DeleteMatchActionPerformed

    private void UpdateMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateMatchActionPerformed
        // TODO add your handling code here:
             try {
                 
               if (isValidData()) {  
               int result = JOptionPane.showConfirmDialog(this," Do you want to continue action?","Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                
                if (result == JOptionPane.YES_OPTION){ 
                            
                            String strSQL = "UPDATE match SET home = " + cmbHome.getSelectedItem().toString() + " ," +
                                    "visitor = "+cmbVisitor.getSelectedItem().toString() + " ," +
                                    "result = "+ cmbResult.getSelectedItem().toString() + ", " +
                                    "home_goals = " + txtHomeGoals.getText()+ ", " +
                                    "visitor_goals = " + txtVisitGoals.getText()
                                    + " WHERE match_number = " + cmbMatchNo.getSelectedItem().toString();
                         
                            result = dbCon.executePrepared(strSQL);
                            if (result >0){
                                     javax.swing.JLabel label = new javax.swing.JLabel("Match Number " + cmbMatchNo.getSelectedItem().toString() + " updated successfully.");
                                     label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                     JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                     getNewData();
                            }
                            else {
                                
                            }
                    }
                
               }else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            
        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating match." + e.getMessage());
        }
             
    }//GEN-LAST:event_UpdateMatchActionPerformed

    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        if (txtHomeGoals.getText().trim().isEmpty() || !isInteger(txtHomeGoals.getText().trim())) {
            if (txtHomeGoals.getText().trim().isEmpty()) {
                lblErrorHome.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtHomeGoals.getText().trim())) {
                lblErrorHome.setText("Invalid. Must be integer.");
            }

            lblErrorHome.setVisible(true);
            result = false;
        }
        
        
        if (txtVisitGoals.getText().trim().isEmpty() || !isInteger(txtVisitGoals.getText().trim())) {
            if (txtVisitGoals.getText().trim().isEmpty()) {
                lblErrorVisitor.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtVisitGoals.getText().trim())) {
                lblErrorVisitor.setText("Invalid. Must be integer.");
            }

            lblErrorVisitor.setVisible(true);
            result = false;
        }
         
        
        int home = Integer.parseInt(txtHomeGoals.getText().trim());
        int visitor = Integer.parseInt(txtVisitGoals.getText().trim());
        int res = Integer.parseInt(cmbResult.getSelectedItem().toString());
        
        if (res == 1){
            if (home <= visitor){
                lblErrorHome.setText("Invalid. Cannot be smaller or equal.");
                lblErrorVisitor.setText("Invalid. Cannot be larger.");
                
                lblErrorHome.setVisible(true);
                lblErrorVisitor.setVisible(true);
                result = false;
            }
        }
        else if (res == 2){
            if (home >= visitor){
                lblErrorHome.setText("Invalid. Cannot be larger.");
                lblErrorVisitor.setText("Invalid. Cannot be smaller or equal.");
                
                lblErrorHome.setVisible(true);
                lblErrorVisitor.setVisible(true);
                result = false;
            }
        }
        
        else if (res ==3){
            if (home != visitor){
                lblErrorHome.setText("Invalid. Must be equal.");
                lblErrorVisitor.setText("Invalid. Must be equal.");
                
                lblErrorHome.setVisible(true);
                lblErrorVisitor.setVisible(true);
                result = false;
            }
                
        } 
   
         return result;  
    }
    
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    
     void clearErrorLabels() {
        lblErrorVisitor.setText("");
        lblErrorVisitor.setVisible(false);
        lblErrorHome.setText("");
        lblErrorHome.setVisible(false);
      
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeleteMatch;
    private javax.swing.JButton Next;
    private javax.swing.JButton Prev;
    private javax.swing.JButton UpdateMatch;
    private javax.swing.JComboBox<String> cmbHome;
    private javax.swing.JComboBox<String> cmbMatchNo;
    private javax.swing.JComboBox<String> cmbResult;
    private javax.swing.JComboBox<String> cmbVisitor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAway;
    private javax.swing.JLabel lblErrorHome;
    private javax.swing.JLabel lblErrorVisitor;
    private javax.swing.JLabel lblHome;
    private javax.swing.JLabel lblMatchNumber;
    private javax.swing.JLabel lblResult;
    private javax.swing.JTextField txtHomeGoals;
    private javax.swing.JTextField txtVisitGoals;
    // End of variables declaration//GEN-END:variables
}
