/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author usama
 */
public class UpdateDeleteTeams extends javax.swing.JFrame {

    /**
     * Creates new form UpdateDeleteTeams
     */
    myDBCon dbCon;
    ResultSet rs;
    
    
    public UpdateDeleteTeams() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        lblErrorTeamName.setVisible(false);
        lblErrorMgrID.setVisible(false);
        lblErrorHomeGround.setVisible(false);

            dbCon = new myDBCon();
            getNewData();
    }

    private void getNewData() {

        try {
            
             rs =dbCon.executeStatement("SELECT team_id, team_name, mgr_id, home_ground from teams ORDER BY team_id ASC");
             
            cmbTeamID.removeAllItems();          
            while (rs.next()) {
                cmbTeamID.addItem(rs.getString("team_id"));
            }
                rs.beforeFirst();
                rs.first();
                populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected empno.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
   
    private void populateFields() {
        try {
            txtTeamName.setText(rs.getString("team_name"));
            txtManagerID.setText(rs.getString("mgr_id")); 
            txtHomeGround.setText(rs.getString("home_ground"));
            cmbTeamID.setSelectedItem(rs.getString("team_id"));
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void MoveNext() {
        try {
            // TODO add your handling code here:

            if (!rs.isLast()) {

                rs.next();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void MovePrevious() {
        try {
            // TODO add your handling code here:

            if (!rs.isFirst()) {
                rs.previous();
                populateFields();

            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                Prev.setEnabled(false);
            } else {
                Prev.setEnabled(true);
            }
            if (rs.isLast()) {
                Next.setEnabled(false);
            } else {
                Next.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePlayer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ManagerID = new javax.swing.JLabel();
        Teamname = new javax.swing.JLabel();
        txtTeamName = new javax.swing.JTextField();
        txtManagerID = new javax.swing.JTextField();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        Prev = new javax.swing.JButton();
        lblErrorTeamName = new javax.swing.JLabel();
        lblErrorMgrID = new javax.swing.JLabel();
        HomeGround = new javax.swing.JLabel();
        txtHomeGround = new javax.swing.JTextField();
        lblErrorHomeGround = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbTeamID = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("Century", 1, 24)); // NOI18N
        jLabel1.setText("Update/Delete Team ");

        ManagerID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ManagerID.setText("Manager ID");

        Teamname.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Teamname.setText("Team Name:");

        txtTeamName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeamNameActionPerformed(evt);
            }
        });

        txtManagerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManagerIDActionPerformed(evt);
            }
        });

        Update.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Update.setText("UPDATE");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Delete.setText("DELETE");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        Next.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Next.setText("NEXT");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        Prev.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Prev.setText("PREVIOUS");
        Prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevActionPerformed(evt);
            }
        });

        lblErrorTeamName.setForeground(new java.awt.Color(255, 0, 51));
        lblErrorTeamName.setText("Error");

        lblErrorMgrID.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorMgrID.setText("Error");

        HomeGround.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        HomeGround.setText("Home Ground");

        lblErrorHomeGround.setForeground(new java.awt.Color(255, 51, 51));
        lblErrorHomeGround.setText("Error");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Team ID:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ManagerID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Teamname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(HomeGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(Prev))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(Next, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbTeamID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtHomeGround)
                                            .addComponent(txtTeamName)
                                            .addComponent(txtManagerID, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblErrorTeamName)
                                            .addComponent(lblErrorMgrID)
                                            .addComponent(lblErrorHomeGround)))))))
                    .addComponent(jLabel1))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTeamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Teamname)
                    .addComponent(lblErrorTeamName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ManagerID)
                    .addComponent(lblErrorMgrID))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HomeGround)
                    .addComponent(txtHomeGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblErrorHomeGround))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbTeamID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Update)
                    .addComponent(Delete)
                    .addComponent(Next)
                    .addComponent(Prev))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
         try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);


            //TRY TEAMNUMBERS AND TEAM NAMES THIS MAY MAKE UR LIFE EASY MY DUDE
            if (isValidData()) {
               int result = JOptionPane.showConfirmDialog(this," Do you want to continue action?","Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                
                if (result == JOptionPane.YES_OPTION){ 
                            
                            String strSQL = "UPDATE teams SET mgr_id = " + txtManagerID.getText().trim() + " ," +
                                    "team_name = '"+txtTeamName.getText().trim()+ "' ," +
                                    "home_ground = '"+ txtHomeGround.getText().trim()+ "'"
                                    + "WHERE team_id = " + cmbTeamID.getSelectedItem().toString();
                         
                            result = dbCon.executePrepared(strSQL);
                            if (result >0){                          
                                     javax.swing.JLabel label = new javax.swing.JLabel("team_id " + cmbTeamID.getSelectedItem().toString() + " updated successfully.");
                                     label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                     JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                     getNewData();
                            }
                            else {
                                
                            }
                } else {
                    // check validation errors 
                }
 
            }else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

 

            }
            
        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating team." + e.getMessage());
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void PrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_PrevActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        try {
            String strSQL;
              
            int result = JOptionPane.showConfirmDialog(this," Do you want to continue action?","Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {

                        strSQL = "DELETE FROM players WHERE team_id = " +cmbTeamID.getSelectedItem().toString();
                        result= dbCon.executePrepared(strSQL);
                  
                        strSQL = "DELETE FROM teams WHERE team_id = " +cmbTeamID.getSelectedItem().toString();
                        result= dbCon.executePrepared(strSQL);
                 
                        if (result >0){
                                javax.swing.JLabel label = new javax.swing.JLabel("Team with Team_ID " + cmbTeamID.getSelectedItem().toString() + " deleted successfully.");
                                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                                getNewData();
                               }  
                            else {   
                        }
                    }
               
             else {
                 javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting team." + e.getMessage() );
        }
    }//GEN-LAST:event_DeleteActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
         MoveNext();
    }//GEN-LAST:event_NextActionPerformed

    private void txtTeamNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeamNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTeamNameActionPerformed

    private void txtManagerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManagerIDActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtManagerIDActionPerformed

    
    void clearErrorLabels() {
        lblErrorTeamName.setText("");
        lblErrorTeamName.setVisible(false);
        lblErrorMgrID.setText("");
        lblErrorMgrID.setVisible(false);
        lblErrorTeamName.setText("");
        lblErrorTeamName.setVisible(false);

    }
    
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }
    boolean isValidData() {

        clearErrorLabels();
        boolean result = true;
        if (txtManagerID.getText().trim().isEmpty() || !isInteger(txtManagerID.getText().trim())||txtManagerID.getText().trim().length()!=5) {
            if (txtManagerID.getText().trim().isEmpty()) {
                lblErrorMgrID.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtManagerID.getText().trim())) {
                lblErrorMgrID.setText("Invalid. Must be integer.");
            }
            else if (txtManagerID.getText().trim().length()!=5){
                lblErrorMgrID.setText("Invalid. Length of integer must be equal to 5.");
            }

            lblErrorMgrID.setVisible(true);
            result = false;
        }

        if (txtTeamName.getText().trim().isEmpty() || (txtTeamName.getText().trim().length() > 50)) {
            if (txtTeamName.getText().trim().isEmpty()) {
                lblErrorTeamName.setText("Invalid. Cannot be empty.");
            } else if ((txtTeamName.getText().trim().length() > 50)) {
                lblErrorTeamName.setText("Invalid. Must be <= 50 chars.");
            }

            lblErrorTeamName.setVisible(true);
            result = false;
        }
        
        if (txtHomeGround.getText().trim().isEmpty() || (txtHomeGround.getText().trim().length() > 50)) {
            if (txtHomeGround.getText().trim().isEmpty()) {
                lblErrorHomeGround.setText("Invalid. Cannot be empty.");
            } else if ((txtHomeGround.getText().trim().length() > 50)) {
                lblErrorHomeGround.setText("Invalid. Must be <= 50 chars.");
            }

            lblErrorHomeGround.setVisible(true);
            result = false;
        }
        
         return result;  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteTeams.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteTeams.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteTeams.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteTeams.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDeleteTeams().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JLabel HomeGround;
    private javax.swing.JLabel ManagerID;
    private javax.swing.JButton Next;
    private javax.swing.JButton Prev;
    private javax.swing.JLabel Teamname;
    private javax.swing.JButton Update;
    private javax.swing.JComboBox<String> cmbTeamID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblErrorHomeGround;
    private javax.swing.JLabel lblErrorMgrID;
    private javax.swing.JLabel lblErrorTeamName;
    private javax.swing.JTextField txtHomeGround;
    private javax.swing.JTextField txtManagerID;
    private javax.swing.JTextField txtTeamName;
    // End of variables declaration//GEN-END:variables

  
}
